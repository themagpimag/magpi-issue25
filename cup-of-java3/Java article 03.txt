[ Java article #3 ]In this article I'll cover the basic of classes, objects and their methods. I'll also cover the Java Class Library that provides thousands of functions for you, readily available on Java. In addition we will cover the basics of arrays.Classes, Objects, and MethodsFirst things first: in Java we don't normally write all the instructions of our program into a single very long class. Instead we divide our program into smaller sections called "methods". We write a method for every task a class performs. A program usually has several classes, each one in turn has several methods (tasks). For example, we could write a class that represents Car so it has methods to move forward, turn left, and turn right, as in:public class Car {  public void forward(double meters) {    System.out.println("Forward " + meters);    // Add more instructions...  }  public void turnLeft(double degrees) {    System.out.println("Left " + degrees);  }  public void turnRight(double degrees) {    System.out.println("Right " + degrees);  }}The idea of defining this class with separated methods is that using it from another class should be simple to use and to understand. If another class calls the Car class it can tell it to move forward and to turn at will. It won't know the details on how that happens, but it'll be quite easy to understand how to use it from the other class's point of view.Now, let's look in detail on how to write a method. We must write:* its visibility ("public" in this case means the other class can execute it); other visibilities are "private" (cannot be used by other classes), "protected" and "package" (we'll discuss these ones later on).* the return type: ("void" in this case meaning no return at all); or any Java type.* the name of the method (any name you want). For example "forward".* in between parenthesis the list of parameters (any parameters you feel necessary for the method to perform its task); "double meters" in the first method.* Finally, in between curly braces, the Java code that is executed and that performs the requested task.Right, but how do we use these methods? The thing is, we can create many objects of each class. Objects, what's that? Well... each class is like a blueprint from which we can create many objects: we may have a single class "Car" but we can have a thousand car objects, all of them independent of each other. Each one may be doing something different, depending on what tasks we ask each one to do. To create each car object we use the instruction "new" as shown in the next example. In the example below, a CarDriver class creates two objects from the class Car and then uses them:public class CarDriver {  public static void main(final String[] args) {    Car car1 = new Car();    car1.turnLeft(20.0);    car1.forward(5.0);    Car car2 = new Car();    car2.turnRight(45.0);    car2.forward(12.0);  }}Simple, right? The "new" instruction creates an object of a class. Then, to execute tasks on the object you write the name of the object, a dot, the name of the method, and the parameters in between parenthesis. For example:    car1.turnLeft(20.0);executes the method turnLeft on car1 with a parameter of 20.0.Challenge #1: Execute the program  CarDriver that uses the class Car. You must write both in separate files CarDriver.java and Car.java. Then, compile them as shown in the first Java article, and run them with:      java CarDriverChallenge #2: Add a third car "car3" that will move forward 10 meters, then turn right 5 degrees, and finally move forward 14 meters.In some classes you can execute methods without creating objects. These are called "static" methods and we will explain them later on. In this case you use the name of the class instead of the name of an object. For example, the class Math has several methods that work like this: to get the absolute value of the number -12 we use: Math.abs(-12)Quite simple, right?Organizing classes and methodsThere are a lot of heated discussions on how to decide how many classes you should write on your program and which methods to write on each class. This is an advanced subject you may skip for now, but it gets more and more important when you write long programs (a thousand lines or more). Good organization of your program can make an enormous difference in the effort to write it and to fix it. This discipline is called "Object Oriented Design" and if you are interested you can search on the Internet for the most important principles of design, usually called "Design Patterns".The Java Class LibraryIn addition to the Java language itself, every Java installation (JVM) comes with a comprehensive collection of classes that can do a lot of work for you: The Java Class Library. For example, one of these classes is the Math class we saw in the previous section. There are many classes that serve many different purposes such as managing files, connecting to other computers, processing images and sound, real time 3D, using the mouse and keyboard, using databases, showing web pages, and many others. All these classes are already included in any Java installation and are fully available to you. They are described in detail at:http://docs.oracle.com/javase/7/docs/apiOpen a browser and look at this page. Yes, it has a massive amount of classes ready for you! You are not going to be able to learn the whole Java Class Library... for a while at least. You'll need to learn how to pick and choose the classes you need the most. Let me show you how to find a class and its details on this page. Every class belongs to a "package". On the top left section you'll see the list of packages. Once you choose a package, you'll see all the classes in it listed on the box below it. Once you choose one of these classes, the main area on the right will show you the class details.For example, let's look for the class Math we used in the previous section that is located in the java.lang package (therefore its full name is java.lang.Math). On the upper left box scroll down until you find java.lang package. Click on it and the box below will show you many classes in six separated sections: Interfaces, Classes, Enums, Exceptions, Errors, and Annotation Types. Since Math is a class look for it in the Classes section and click on it. When done, the main area will show with a description of the Math class; below it'll show you three optional sections: Fields Summary, Constructor Summary, and Methods Summary. Since we are interested in what this class can do for us, let's look at the Methods section.Challenge #3: Find the methods: abs, sqrt, and pow. Click on each one and see what each one does.Challenge #4: Find the class  java.io.FileReader that reads files, and the class java.util.ArrayList.You can browse around to find classes. Spend a couple of minutes to see which useful methods you can find.ArraysNow, I'm going to introduce Java arrays and I'm going to show its basic usage only. Arrays are very useful types that allows us to manage many elements of the same type under one variable, using a position called "index". Let's say we are selling three paintings and we want to manage the price of each one. Of course we could use three Java variables to store their prices and that would work. For example:    int price1 = 500;    int price2 = 390;    int price3 = 640;But what if tomorrow we have four paintings? maybe we'll have 10! Would we need to rewrite our program? In a case like this it's better to store the prices in an array as in:    int prices[] = new int[3];    prices[0] = 500;    prices[1] = 390;    prices[2] = 640;First we created an array with 3 elements with indexes 0, 1, 2 (yes, we start counting at zero). Then, do you see how we use a different index on each line? We are giving value to a different element each time. Now, What's the price of painting with code #1? Easy:    System.out.println("Price for #1 is"+ prices[1]);And what if the price of #2 goes up to 710? No problem:    prices[2] = 710;The Map GeneratorSo far, so good. We have covered a lot of new subjects here: classes, objects, methods, and arrays. We'll use them together on a map generator. This program has two classes:* MapGenerator.* Terrain.The Map Generator class uses a Terrain object to draw items. The Terrain class stores a map (of letters) using arrays. It starts empty, but can be modified based on what the Map Generator (the caller) asks. So here's the Terrain class:import java.util.Random;public class Terrain {  private Random r;  private char[][] tiles;  public Terrain(int mapNumber, int height, int width) {    this.r = new Random(mapNumber);    this.tiles = new char[height][width];  }  public void setArea(int fromH, int fromW, int toH, int toW, char symbol) {    for (int x = fromH; x < toH; x++) {      for (int y = fromW; y < toW; y++) {        this.tiles[x][y] = symbol;      }    }  }  public void setRandomAreas(int height, int width, char symbol, int howMany) {    for (int i = 0; i < howMany; i++) {      int x = this.r.nextInt(this.tiles.length - height + 1);      int y = this.r.nextInt(this.tiles[0].length - width + 1);      this.setArea(x, y, x + height, y + width, symbol);    }  }  public String show() {    StringBuilder sb = new StringBuilder();    for (int x = 0; x < this.tiles.length; x++) {      for (int y = 0; y < this.tiles[x].length; y++) {        sb.append(this.tiles[x][y]);      }      sb.append("\n");    }    return sb.toString();  }}The MapGenerator class creates a Terrain object, adds objects to it and finally displays it. Here's the class:public class MapGenerator {  public static void main(String[] args) {    if (args.length != 3) {      System.out.println("I need three parameters: "          + "map-number, height and width.");      return;    }    int mapNumber = new Integer(args[0]);    int height = new Integer(args[1]);    int width = new Integer(args[2]);    Terrain land = new Terrain(mapNumber, height, width);    land.setArea(0, 0, height, width, '.'); // ground    land.setRandomAreas(1, 1, 't', 30); // trees    land.setRandomAreas(height / 4, width / 4, 'T', 3); // woods    land.setRandomAreas(1, 1, 'o', 20); // rocks    land.setRandomAreas(height / 4, width / 5, ' ', 3); // lakes    land.setRandomAreas(height / 6, width / 10, ' ', 12); // ponds    land.setRandomAreas(1, 1, '$', 1); // treasure    System.out.println(land.show());  }}Challenge #5: Compile both classes (MapGenerator and Terrain) and execute it. When executing it you need to provide the map number, the length and the width. For example execute it using:    java MapGenerator 6 15 38 You'll see:......t       ............................TTT               o.t.....t...t..t..t.TTo               ....................TTTTTTTTTTT       .....................oTTTTTTToT   .....t......t.............TTTTTTTTT   .............................ot.......o..........o   ..t....o.....   ......t.o..........   ....t...t....   ...t.......o.       TTTT$....t....t................       T   .............   t......t...       T   ....o..t.....   ...........   .t.t..o.........t............   ...   ........   ..t....   .....t..   ...   ....o...   .......   ....o........o..............Do you see the land (dots), the water (blanks), the rocks (o), the Forest (T and t), and the hidden treasure ($)?Challenge #6: Execute the program with different values to see different maps. The first number is the map number. The second and third are the size of the map (lines, columns). Try, for example:     java MapGenerator 7 15 34 Try other maps too and see how the MapGenerator class works.Congratulations! You've learned the basics of Classes and Methods!